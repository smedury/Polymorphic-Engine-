// Calc.cpp : Defines the entry point for the console application.
//
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>
#include <cctype>
#include <sstream>
#include<fstream>
#include<ostream>

using namespace std;
void Encrypt(string&, int key);
string Decrypt(string strTarget, int key);
string preObfuscation(string line);
string insert_assembly(string s);
string scrambler(string s);
int main(int argc, char* argv[]) {
    //float add = addition(1.3,3.4);

    string line,payload,strTarget;
    int iSecret, iGuess, iSeed;
    //payload = "Payload.cpp";
    while(1)
    {
        cout<<"Enter a to encrypt or b run, c to exit";
        char ch;
        cin>>ch;
        switch(ch)
        {
            case 'a' :
                {
                    cin>>payload;
                    ifstream myfile_in(payload.c_str());
                    //ofstream myfile_out ("Pay.cpp");
                    /* initialize random seed: */
                    iSeed = time(NULL);
                    srand(iSeed);
                    /* generate secret number between 1 and 10: */
                    iSecret = rand() % 10 + 1;
                    //stringstream ss;
                    //ss<<iSecret;
                    //strTarget+=string(ss.str())+'\n';
                    Label:
                    if (myfile_in.is_open() )
                    {
                        while ( getline (myfile_in,line) )
                        {
                            strTarget+= preObfuscation(line) + '\n';
                        }
                    }
                    strTarget+="EOF \n";
                    ifstream assembly_functions("assembly_functions.h");
                    if (assembly_functions.is_open() )
                    {
                        string lin1;
                        while ( getline (assembly_functions,lin1) )
                        {
                            strTarget+= lin1+'\n';
                        }
                    }
                    strTarget = insert_assembly(strTarget);
                    Encrypt(strTarget, iSecret);
                    ofstream myfile_out("resource.h");
                    myfile_out<<strTarget;
                    ofstream myfile_out1("testing.cpp");
                    myfile_out1<<Decrypt(strTarget,iSecret);
                    cout<<"File Encrypted!! Check testing.cpp";
                    break;
                }

            case 'b' :
                {

                    ofstream fileout("Payload.cpp");

                    if(fileout.is_open())
                    {
                        fileout<<Decrypt(strTarget,iSecret);
                    }
                    cout<<Decrypt(strTarget,iSecret);
                    break;


                }
                case 'c' :
                {
                   return 0;
                }
        }
    }
	//cout << "Encrypted: " << strTarget << endl;
	//cout << "Decrypted: " << Decrypt(strTarget,iSecret) << endl;
	return 0;
}

void Encrypt(string &strTarget, int key)
{
	int len = strTarget.length();
	char a;
	string strFinal(strTarget);

	for (int i = 0; i <= (len-1); i++)
	{
		a = strTarget.at(i);
		int b = (int)a; //get the ASCII value of 'a'
		b += key; //Mulitply the ASCII value by 2
		if (b > 254) { b = 254; }
		a = (char)b; //Set the new ASCII value back into the char
		strFinal.insert(i , 1, a); //Insert the new Character back into the string
	}
	string strEncrypted(strFinal, 0, len);
	strTarget = strEncrypted;
}

string Decrypt(string strTarget, int key)
{
	int len = strTarget.length();
	char a;
	string strFinal(strTarget);

	for (int i = 0; i <= (len-1); i++)
	{
		a = strTarget.at(i);
		int b = (int)a;
		b -= key;

		a = (char)b;
		strFinal.insert(i, 1, a);
	}
	string strDecrypted(strFinal, 0, len);
	return strDecrypted;
}
string preObfuscation(string line)
{
    string newLine;
    if(line.find("main()")!=string::npos)
    {
        newLine+="void addition(float arg1, float arg2); \n void subtraction(float arg1, float arg2); \n void multiplication(float arg1, float arg2); \n void division(float arg1, float arg2); \n"+line + '\n';
    }
    else if(line.find("for")!=string::npos)
    {
        newLine="//for loop \n"+line;
    }
    else if(line.find("while")!=string::npos)
    {
        newLine="//while loop \n"+line;
    }
    else if(line.find("if")!=string::npos)
    {
        newLine="//condition \n"+line;
    }
    else if(line.find("}")!=string::npos)
    {
        newLine="//end of loop or block \n"+line;
    }
    else if(line.find("{")!=string::npos)
    {
        newLine=line+"//begin of loop or block \n";
    }
    else
    {
        newLine = line;
    }
    return newLine;
}
string insert_assembly(string s)
{
    stringstream ss(s.c_str());
    ostringstream ss1;
    string line,newString;
    int i=0;
    bool flag = false;
    int iSeed;
    int loop = 0;
    int j=0;
    if(ss!=NULL)
    {
        while(getline(ss,line))
        {
            if(line.find("}")!=string::npos && flag==true)
            {
                i--;
                if(i<1)
                {
                    flag=false;
                }
            }
            if(line.find("main")!=string::npos)
            {
                flag=true;
                newString+=line+'\n';
                continue;
            }
            else if(line.find("{")!=string::npos)
            {
                i++;
                newString+=line+'\n';
                continue;
            }
            else if(line.find("if")!=string::npos||line.find("for")!=string::npos||line.find("while")!=string::npos)
            {
                loop++;
                newString+=line+'\n';
                continue;
            }

            else if(line.find("EOF")!=string::npos)
            {
                flag=false;
            }
            else if(i>0&&flag==true)
            {
                if(loop==0||line.find("condition")!=string::npos)
                {
                    /*float arg1 = rand()/rand();
                    float arg2 = rand()/rand();
                    ss1<<arg1<<","<<arg2;*/
                    switch((j%4)+1)
                    {
                        case 1:
                            newString+="addition(4.5,9.5);" + line+'\n';
                            break;
                        case 2:
                            newString+="subtraction(9.5,4.5);" + line+'\n';
                            break;
                        case 3:
                            newString+="multiplication(9,4.5);"+line+'\n';
                            break;
                        case 4:
                            newString+="division(9,4.5);"+line+'\n';
                            break;
                        default:
                            newString+=line+'\n';
                    }

                }
                else
                {
                     newString+=line+'\n';
                    if(loop>0)
                    {
                        loop--;
                    }
                }
            }
            else
            {
                newString+=line+'\n';
            }
        }
        return newString;
    }
}
string insert_labels(string s)
{
    stringstream ss(s.c_str());
    ostringstream ss1;
    string line,newString;
    int i=0;
    bool flag = false;
    int iSeed;
    int loop = 0;
    int j=0;
    if(ss!=NULL)
    {
        while(getline(ss,line))
        {
            if(line.find("}")!=string::npos && flag==true)
            {
                i--;
                if(i<1)
                {
                    flag=false;
                }
            }
            if(line.find("main")!=string::npos)
            {
                flag=true;
                newString+=line+'\n';
                continue;
            }
            else if(line.find("{")!=string::npos)
            {
                i++;
                newString+=line+'\n';
                continue;
            }
            else if(line.find("if")!=string::npos||line.find("for")!=string::npos||line.find("while")!=string::npos)
            {
                loop++;
                newString+=line+'\n';
                continue;
            }

            else if(line.find("EOF")!=string::npos)
            {
                flag=false;
            }
            else if(i>0&&flag==true)
            {
                if(loop==0||line.find("condition")!=string::npos)
                {
                    /*float arg1 = rand()/rand();
                    float arg2 = rand()/rand();
                    ss1<<arg1<<","<<arg2;*/
                    switch((j%4)+1)
                    {
                        case 1:
                            newString+="addition(4.5,9.5);" + line+'\n';
                            break;
                        case 2:
                            newString+="subtraction(9.5,4.5);" + line+'\n';
                            break;
                        case 3:
                            newString+="multiplication(9,4.5);"+line+'\n';
                            break;
                        case 4:
                            newString+="division(9,4.5);"+line+'\n';
                            break;
                        default:
                            newString+=line+'\n';
                    }

                }
                else
                {
                     newString+=line+'\n';
                    if(loop>0)
                    {
                        loop--;
                    }
                }
            }
            else
            {
                newString+=line+'\n';
            }
        }
        return newString;
    }
}
string scrambler(string s)
{
    stringstream ss(s.c_str());
    ostringstream ss1;
    string line,newString;
    int i=0;
    bool flag = false;
    int iSeed;
    int loop = 0;
    int j=0;
    if(ss!=NULL)
    {
        while(getline(ss,line))
        {
            if(line.find("}")!=string::npos && flag==true)
            {
                i--;
                if(i<1)
                {
                    flag=false;
                }
            }
            if(line.find("main")!=string::npos)
            {
                flag=true;
                newString+=line+'\n';
                continue;
            }
            else if(line.find("{")!=string::npos)
            {
                i++;
                newString+=line+'\n';
                continue;
            }
            else if(line.find("if")!=string::npos||line.find("for")!=string::npos||line.find("while")!=string::npos)
            {
                loop++;
                newString+=line+'\n';
                continue;
            }

            else if(line.find("EOF")!=string::npos)
            {
                flag=false;
            }
            else if(i>0&&flag==true)
            {
                if(loop==0||line.find("condition")!=string::npos)
                {
                    /*float arg1 = rand()/rand();
                    float arg2 = rand()/rand();
                    ss1<<arg1<<","<<arg2;*/
                    switch((j%4)+1)
                    {
                        case 1:
                            newString+="addition(4.5,9.5);" + line+'\n';
                            break;
                        case 2:
                            newString+="subtraction(9.5,4.5);" + line+'\n';
                            break;
                        case 3:
                            newString+="multiplication(9,4.5);"+line+'\n';
                            break;
                        case 4:
                            newString+="division(9,4.5);"+line+'\n';
                            break;
                        default:
                            newString+=line+'\n';
                    }

                }
                else
                {
                     newString+=line+'\n';
                    if(loop>0)
                    {
                        loop--;
                    }
                }
            }
            else
            {
                newString+=line+'\n';
            }
        }
        return newString;
    }
}
